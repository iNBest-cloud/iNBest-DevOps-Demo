name: SonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Requerido para análisis completo

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x' # Ajusta a tu versión de .NET

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install SonarCloud Scanner
        run: dotnet tool install --global dotnet-sonarscanner
        
      - name: Install Coverlet for test coverage
        run: dotnet tool install --global coverlet.console

      - name: Build and analyze with SonarCloud
        env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_PROJECT_KEY: ${{ secrets.PROYK }}
            SONAR_ORG: ${{ secrets.ORG }}
        run: |
          dotnet sonarscanner begin `
            /k:"$env:SONAR_PROJECT_KEY" `
            /o:"$env:SONAR_ORG" `
            /d:sonar.login=$env:SONAR_TOKEN `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.sources="." `
            /d:sonar.inclusions="**/*.cs,**/*.py" `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/Migrations/**,__pycache__/**,*.pyc" `
            /d:sonar.scm.provider=git `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

          dotnet restore
          dotnet build --no-incremental

          # Ejecutar tests con cobertura .NET
          dotnet test /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover

          dotnet sonarscanner end /d:sonar.login=$env:SONAR_TOKEN

  quality-gate:
    name: SonarCloud Quality Gate
    runs-on: ubuntu-latest
    needs: build   # Este job espera a que termine el análisis

    steps:
      - name: SonarCloud Quality Gate check
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.PROYK }}
            -Dsonar.organization=${{ secrets.ORG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
