name: SonarCloud Quality Gate

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  # 1. Primer check: Build and analyze
  build:
    name: SonarCloud / Build and analyze (pull_request)
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install SonarCloud Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Install Coverlet for test coverage
        run: dotnet tool install --global coverlet.console

      - name: Build and analyze with SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.PROYK }}
          SONAR_ORG: ${{ secrets.ORG }}
        run: |
          dotnet sonarscanner begin `
            /k:"$env:SONAR_PROJECT_KEY" `
            /o:"$env:SONAR_ORG" `
            /d:sonar.login="$env:SONAR_TOKEN" `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/Migrations/**" `
            /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

          dotnet restore
          dotnet build --no-incremental
          dotnet test /p:CollectCoverage=true /p:CoverletOutput=./coverage/ /p:CoverletOutputFormat=opencover
          dotnet sonarscanner end /d:sonar.login="$env:SONAR_TOKEN"

  quality-gate:
    name: SonarCloud Quality Gate / Build and analyze (pull_request)
    runs-on: windows-latest
    needs: build   # espera al análisis

    steps:
      - name: Wait for SonarCloud processing
        run: Start-Sleep -Seconds 30

      - name: Check Quality Gate via API
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.PROYK }}
        run: |
          $maxAttempts = 10
          $delay = 15
          for ($i=1; $i -le $maxAttempts; $i++) {
            Write-Output "Attempt $i: Checking SonarCloud Quality Gate..."

            # Realiza la solicitud a la API
            $response = curl -s -u "$env:SONAR_TOKEN:" `
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$env:SONAR_PROJECT_KEY"

            # Verifica si la respuesta está vacía o nula
            if (-not $response) {
              Write-Error "No response received from SonarCloud API."
              exit 1
            }

            # Imprime la respuesta completa para depuración
            Write-Output "API Response: $response"

            # Convierte la respuesta a JSON
            $jsonResponse = $response | ConvertFrom-Json

            # Si hay errores en la respuesta, los imprimimos y salimos con error
            if ($jsonResponse.errors) {
              Write-Error "Error from API: $($jsonResponse.errors | ForEach-Object { $_.msg })"
              exit 1
            }

            # Extrae el estado del Quality Gate
            $status = $jsonResponse.projectStatus.status
            Write-Output "Quality Gate Status: $status"

            # Si el estado es OK, terminamos el ciclo
            if ($status -eq "OK") {
              Write-Host "Quality Gate passed!"
              exit 0
            }
            # Si el estado es ERROR, fallamos el build
            elseif ($status -eq "ERROR") {
              Write-Error "Quality Gate failed! Merge will be blocked."
              exit 1
            }

            # Si el estado no es ni OK ni ERROR, espera y reintenta
            Write-Output "Status is $status. Retrying in $delay seconds..."
            Start-Sleep -Seconds $delay
          }

          # Si no se pudo determinar el estado después de varios intentos
          Write-Error "Quality Gate status could not be determined after $maxAttempts attempts."
          exit 1

